1、原有流程如图所示：start过程需要读取一次配置、检查service冲突、注册健康检查。而reload过程中会先将原有配置备份，然后读取一次配置，在读取完之后进行service冲突检查，检查完之后返回检查结果，并进行一次恢复原有配置的操作。如果配置检查失败，直接返回。反之会接着进行start流程。这里边检查service冲突涉及到两重vs链表遍历比较，当有40w vs时，复杂度达到了800亿。通过在此处对service进行哈希处理，将复杂度降低到40w。
2、由于reload和start过程中均会配置读取和service冲突检查，所以在reload过程中，将新读取的配置先不删除，只有当配置冲突检查不通过的时候再进行配置还原的操作，如果配置未发现冲突，直接跳过start阶段的读取配置、service冲突检测流程。
3、在注册健康检查的过程中，如果配置了check-merge,原有逻辑是通过把当前的checker到checker队列里面找是否有和自己的ip地址相同的rs，最坏情况下【每次都要遍历到最后才找到和自己相同的rs】，时间复杂度达到了N^2，而在热加载过程中，是把新增的vs的rs去原有的checker队列里面找是否有和自己相同的rs，最坏情况下【原有rs全部未配置check merge],时间复杂度达到了m*O(N)，m为改vs中rs的数量。所以通过在注册健康检查函数中按rs进行哈希，可以在start过程中优化为O(N),而在热加载中优化为O(1).
